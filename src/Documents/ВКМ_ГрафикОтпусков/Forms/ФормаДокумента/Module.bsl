#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЕстьПревышениеДнейОтпуска = ПроверкаСотрудниковНаСервере();
	Если ЕстьПревышениеДнейОтпуска Тогда
		
		СообщениеОбОтпусках = Новый СообщениеПользователю;
		ТекстСБ = СтрШаблон("В документе найдены сотрудники чей отпуск в сумме превышает 28 дней, строки с ними выделены красным цветом.");
		СообщениеОбОтпусках.Текст = ТекстСБ;
		СообщениеОбОтпусках.Сообщить();
	КонецЕсли
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура АнализГрафика(Команда)
	
	АдресВХ = АнализГрафикаНаСервере();
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресВХ",АдресВХ);
	ОткрытьФорму("Документ.ВКМ_ГрафикОтпусков.Форма.ФормаАнализГрафика",ПараметрыФормы,ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОтпуска(Команда)
	
	ЕстьПревышениеДнейОтпуска = ПроверкаСотрудниковНаСервере2();
	Если ЕстьПревышениеДнейОтпуска Тогда
		
		СообщениеОбОтпусках = Новый СообщениеПользователю;
		ТекстСБ = СтрШаблон("В документе найдены сотрудники чей отпуск в сумме превышает 28 дней, строки с ними выделены красным цветом.");
		СообщениеОбОтпусках.Текст = ТекстСБ;
		СообщениеОбОтпусках.Сообщить();
	Иначе
		СообщениеОбОтпусках = Новый СообщениеПользователю;
		ТекстСБ = СтрШаблон("Проверка пройдена!");
		СообщениеОбОтпусках.Текст = ТекстСБ;
		СообщениеОбОтпусках.Сообщить();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПроверкаСотрудниковНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВКМ_ГрафикОтпусковОтпускаСотрудников.НомерСтроки КАК НомерСтроки,
	|	ВКМ_ГрафикОтпусковОтпускаСотрудников.Сотрудник КАК Сотрудник,
	|	ВКМ_ГрафикОтпусковОтпускаСотрудников.ДатаНачала КАК ДатаНачала,
	|	ВКМ_ГрафикОтпусковОтпускаСотрудников.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТ_ДанныеТЧ
	|ИЗ
	|	Документ.ВКМ_ГрафикОтпусков.ОтпускаСотрудников КАК ВКМ_ГрафикОтпусковОтпускаСотрудников
	|ГДЕ
	|	ВКМ_ГрафикОтпусковОтпускаСотрудников.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеТЧ.Сотрудник КАК Сотрудник,
	|	СУММА(ЕСТЬNULL(РАЗНОСТЬДАТ(ВТ_ДанныеТЧ.ДатаНачала, ВТ_ДанныеТЧ.ДатаОкончания, ДЕНЬ)+1, 0)) КАК КолВоДней
	|ПОМЕСТИТЬ ВТ_КолВоДней
	|ИЗ
	|	ВТ_ДанныеТЧ КАК ВТ_ДанныеТЧ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДанныеТЧ.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеТЧ.НомерСтроки КАК НомерСтроки,
	|	ВТ_ДанныеТЧ.Сотрудник КАК Сотрудник,
	|	ВТ_КолВоДней.КолВоДней КАК КолВоДней,
	|	ВЫБОР
	|		КОГДА ВТ_КолВоДней.КолВоДней > 28
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Превышение
	|ИЗ
	|	ВТ_ДанныеТЧ КАК ВТ_ДанныеТЧ
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_КолВоДней КАК ВТ_КолВоДней
	|		ПО ВТ_ДанныеТЧ.Сотрудник = ВТ_КолВоДней.Сотрудник";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	//Подготовим форму к оформлению - очистим её на всякий случай
	ЕстьПревышениеДнейОтпуска = Ложь;
	Пока Выборка.Следующий() Цикл  
		НомерСтроки = Выборка.НомерСтроки;
		Превышение = Выборка.Превышение;
		Если Превышение Тогда
			Строка = Объект.ОтпускаСотрудников.Получить(НомерСтроки-1);
			Строка.ПревышениеДнейОтпуска = Истина;
			ЕстьПревышениеДнейОтпуска = Истина;
		Иначе  Строка = Объект.ОтпускаСотрудников.Получить(НомерСтроки-1);
			Строка.ПревышениеДнейОтпуска = Ложь;
		КонецЕсли;
	КонецЦикла; 
	
	//Наполним список оформляемых колонок
	МассивИменКолонокДляПодсветки = Новый Массив;
	Для каждого Стр из Элементы.ОтпускаСотрудников.ПодчиненныеЭлементы Цикл
		МассивИменКолонокДляПодсветки.Добавить(Стр.Имя);
	КонецЦикла;
	
	//НастроимОформление
	ЭлементУОПревышение = УсловноеОформление.Элементы.Добавить();
	ЭлементУОПревышение.Использование = Истина;
	ЭлементУОПревышение.Оформление.УстановитьЗначениеПараметра("ЦветФона",  WebЦвета.Красный);
	ЭлементУсловия = ЭлементУОПревышение.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("Объект.ОтпускаСотрудников.ПревышениеДнейОтпуска");
	ЭлементУсловия.ПравоеЗначение = Истина;
	ЭлементУсловия.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.Использование   = Истина; 
	
	//применим оформление к колонкам
	Для каждого ТекЭлемент из МассивИменКолонокДляПодсветки Цикл
		ОформляемоеПоле = ЭлементУОПревышение.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ТекЭлемент);
	КонецЦикла;
	
	Возврат ЕстьПревышениеДнейОтпуска
	
КонецФункции  

&НаСервере
Функция ПроверкаСотрудниковНаСервере2()
	
	ОтпускаТЗ = Объект.ОтпускаСотрудников.Выгрузить();
	ОтпускаТЗ.Колонки.Добавить("КоличествоДнейОтпуска", Новый ОписаниеТипов("Число"));
	Для Каждого Строка из ОтпускаТЗ Цикл
		ДатаНачала = НачалоДня(Строка.ДатаНачала);
		ДатаОкончания = НачалоДня(Строка.ДатаОкончания);
		Строка.КоличествоДнейОтпуска = (ДатаОкончания - ДатаНачала) / (60*60*24) + 1;
	КонецЦикла;
	ОтпускаТЗ.Свернуть("Сотрудник","КоличествоДнейОтпуска");
	КолВоСтрок = ОтпускаТЗ.Количество();
	Номер = КолВоСтрок-1;
	
	Пока Номер >= 0 Цикл
		Строка = ОтпускаТЗ[Номер];
		Если НЕ Строка.КоличествоДнейОтпуска > 28 Тогда
			ОтпускаТЗ.Удалить(Номер);
		Иначе 
		КонецЕсли;
		Номер = Номер - 1; 
	КонецЦикла;
	
	ЕстьПревышениеДнейОтпуска = Ложь;
	ОтпускаТЗ2 = Объект.ОтпускаСотрудников.Выгрузить();
	Для Каждого СтрокаТЗ Из ОтпускаТЗ2 Цикл
		Сотрудник = СтрокаТЗ.Сотрудник;
		Если ОтпускаТЗ.Найти(Сотрудник) = Неопределено Тогда
			СтрокаТЗ.ПревышениеДнейОтпуска = Ложь;
		Иначе СтрокаТЗ.ПревышениеДнейОтпуска = Истина;
			ЕстьПревышениеДнейОтпуска = Истина;
		КонецЕсли;
		
	КонецЦикла;
	Объект.ОтпускаСотрудников.Загрузить(ОтпускаТЗ2);
	
	//Наполним список оформляемых колонок
	МассивИменКолонокДляПодсветки = Новый Массив;
	Для каждого Стр из Элементы.ОтпускаСотрудников.ПодчиненныеЭлементы Цикл
		МассивИменКолонокДляПодсветки.Добавить(Стр.Имя);
	КонецЦикла;
	
	//НастроимОформление
	ЭлементУОПревышение = УсловноеОформление.Элементы.Добавить();
	ЭлементУОПревышение.Использование = Истина;
	ЭлементУОПревышение.Оформление.УстановитьЗначениеПараметра("ЦветФона",  WebЦвета.Красный);
	ЭлементУсловия = ЭлементУОПревышение.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("Объект.ОтпускаСотрудников.ПревышениеДнейОтпуска");
	ЭлементУсловия.ПравоеЗначение = Истина;
	ЭлементУсловия.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.Использование   = Истина; 
	
	//применим оформление к колонкам
	Для каждого ТекЭлемент из МассивИменКолонокДляПодсветки Цикл
		ОформляемоеПоле = ЭлементУОПревышение.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ТекЭлемент);
	КонецЦикла;
	
	Возврат ЕстьПревышениеДнейОтпуска
	
КонецФункции

&НаСервере 

Функция АнализГрафикаНаСервере()
	ДанныеГрафика = Объект.ОтпускаСотрудников.Выгрузить();
	АдресВХ = ПоместитьВоВременноеХранилище(ДанныеГрафика,УникальныйИдентификатор);                   
	Возврат АдресВХ
КонецФункции

#КонецОбласти


