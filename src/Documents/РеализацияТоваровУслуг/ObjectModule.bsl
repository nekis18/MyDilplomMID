
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
	#Область ОбработчикиСобытий
	
	Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
		
		Ответственный = Пользователи.ТекущийПользователь();
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ЗаполнитьНаОснованииЗаказаПокупателя(ДанныеЗаполнения);
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
		
		Если ОбменДанными.Загрузка Тогда
			Возврат;
		КонецЕсли;
		
		СуммаДокумента = Товары.Итог("Сумма") + Услуги.Итог("Сумма");
		
	КонецПроцедуры
	
	Процедура ОбработкаПроведения(Отказ, Режим)
		
		Движения.ОбработкаЗаказов.Записывать = Истина;
		Движения.ОстаткиТоваров.Записывать = Истина;
		//+++ КНВ ВКМ_ВыполненныеКлиентуРаботы закрытие регистра
		Движения.ВКМ_ВыполненныеКлиентуРаботы.Записать();
		Движения.ВКМ_ВыполненныеКлиентуРаботы.Записывать = Истина;
		//--- КНВ ВКМ_ВыполненныеКлиентуРаботы закрытие регистра
		Движения.ОстаткиТоваров.Записывать = Истина;
		Движение = Движения.ОбработкаЗаказов.Добавить();
		Движение.Период = Дата;
		Движение.Контрагент = Контрагент;
		Движение.Договор = Договор;
		Движение.Заказ = Основание;
		Движение.СуммаОтгрузки = СуммаДокумента;
		
		Для Каждого ТекСтрокаТовары Из Товары Цикл
			Движение = Движения.ОстаткиТоваров.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Период = Дата;
			Движение.Контрагент = Контрагент;
			Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
			Движение.Сумма = ТекСтрокаТовары.Сумма;
			Движение.Количество = ТекСтрокаТовары.Количество;
		КонецЦикла;
		
		//+++ КНВ ВКМ_ВыполненныеКлиентуРаботы закрытие регистра
		Для Каждого ТекСтрокаУслуги Из Услуги Цикл
			НоменклатураРаботыСпециалиста = Константы.ВКМ_НоменклатураРаботыСпециалиста.Получить();
			Если ТекСтрокаУслуги.Номенклатура = НоменклатураРаботыСпециалиста Тогда
				Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
				Движение.Период = Дата;
				Движение.Клиент = Контрагент;
				Движение.Договор = Договор;
				Движение.СуммаКОплате = ТекСтрокаУслуги.Сумма;
				Движение.КоличествоЧасов = ТекСтрокаУслуги.Количество;	
			КонецЕсли;
			
		КонецЦикла;
		//--- КНВ ВКМ_ВыполненныеКлиентуРаботы закрытие регистра
		
	КонецПроцедуры
	
	Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
		
		//Отключить проверку на ОСНОВАНИЕ
		//Договор
		// Данный фрагмент построен конструктором.
		// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.ВидДоговора
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Договор);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ВидДоговора = ВыборкаДетальныеЗаписи.ВидДоговора;
			Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбонентскоеОбслуживание Тогда
				ПорядковыйНомер = ПроверяемыеРеквизиты.Найти("Основание");
				Если ПорядковыйНомер <> Неопределено Тогда
					ПроверяемыеРеквизиты.Удалить(ПорядковыйНомер);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	#КонецОбласти
	
	#Область СлужебныеПроцедурыИФункции
	
	Процедура ЗаполнитьНаОснованииЗаказаПокупателя(ДанныеЗаполнения)
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ЗаказПокупателя.Организация КАК Организация,
		|	ЗаказПокупателя.Контрагент КАК Контрагент,
		|	ЗаказПокупателя.Договор КАК Договор,
		|	ЗаказПокупателя.СуммаДокумента КАК СуммаДокумента,
		|	ЗаказПокупателя.Товары.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		Количество КАК Количество,
		|		Цена КАК Цена,
		|		Сумма КАК Сумма
		|	) КАК Товары,
		|	ЗаказПокупателя.Услуги.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		Количество КАК Количество,
		|		Цена КАК Цена,
		|		Сумма КАК Сумма
		|	) КАК Услуги
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Не Выборка.Следующий() Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		
		ТоварыОснования = Выборка.Товары.Выбрать();
		Пока ТоварыОснования.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Товары.Добавить(), ТоварыОснования);
		КонецЦикла;
		
		УслугиОснования = Выборка.Услуги.Выбрать();
		Пока ТоварыОснования.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Услуги.Добавить(), УслугиОснования);
		КонецЦикла;
		
		Основание = ДанныеЗаполнения;
		
	КонецПроцедуры
	
	Процедура ВКМ_ВыполнитьАвтозаполнение(ДокОбъект = Неопределено) Экспорт
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Константы.ВКМ_НоменклатураАбонентскаяПлата КАК ВКМ_НоменклатураАбонентскаяПлата,
		|	Константы.ВКМ_НоменклатураРаботыСпециалиста КАК ВКМ_НоменклатураРаботыСпециалиста
		|ИЗ
		|	Константы КАК Константы";
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		СообщениеОшибки = Новый СообщениеПользователю;
		ТекстОшибки = "";
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ВКМ_НоменклатураАбонентскаяПлата = ВыборкаДетальныеЗаписи.ВКМ_НоменклатураАбонентскаяПлата;
			ВКМ_НоменклатураРаботыСпециалиста = ВыборкаДетальныеЗаписи.ВКМ_НоменклатураРаботыСпециалиста;
			
			Если НЕ ЗначениеЗаполнено(ВКМ_НоменклатураАбонентскаяПлата) Тогда
				//Сообщим об ошибке
				ТекстОшибки = ТекстОшибки + "Необходимо заполнить значение констаты ВКМ_НоменклатураАбонентскаяПлата."
			КонецЕсли;;
			Если НЕ ЗначениеЗаполнено(ВКМ_НоменклатураРаботыСпециалиста) Тогда
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ТекстОшибки = ТекстОшибки + "|";
				КонецЕсли;
				ТекстОшибки = ТекстОшибки + "Необходимо заполнить значение констаты ВКМ_НоменклатураРаботыСпециалиста."
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				СообщениеОшибки.Текст = ТекстОшибки;
				СообщениеОшибки.Сообщить();
			Иначе
				//Заполняем документ
				ДокОбъект.Услуги.Очистить();
				Выборка = ВКМ_ПолучитьДанныеПоДоговору();    
				Если Выборка.Следующий() Тогда
					
					//Если в договоре ненулевая сумма абонентской платы, 
					//добавьте в табличную часть строку с номенклатурой 
					//из константы НоменклатураАбонентскаяПлата 
					//и суммой абонентской платы из договора.
					Если Выборка.ВКМ_СуммаАбонентскойПлаты <> 0 Тогда
						СтрокаУслуги = ДокОбъект.Услуги.Добавить(); 
						СтрокаУслуги.Номенклатура = ВКМ_НоменклатураАбонентскаяПлата;
						СтрокаУслуги.Количество = 1;
						СтрокаУслуги.Цена = Выборка.ВКМ_СуммаАбонентскойПлаты;
						СтрокаУслуги.Сумма = СтрокаУслуги.Количество * СтрокаУслуги.Цена;
					КонецЕсли;
					
					//Если в месяц даты документа в регистре ВыполненныеКлиентуРаботы 
					//есть информация о выполненных работах по этому договору, добавьте 
					//в табличную часть строку с номенклатурой из константы 
					//НоменклатураРаботыСпециалиста и общим количеством и суммой из 
					//регистра ВыполненныеКлиентуРаботы за месяц документа.
					
					Если Выборка.КоличествоЧасовПриход <> 0 ИЛИ Выборка.СуммаКОплатеПриход <> 0 Тогда
						СтрокаУслуги = ДокОбъект.Услуги.Добавить(); 
						СтрокаУслуги.Номенклатура = ВКМ_НоменклатураРаботыСпециалиста;
						СтрокаУслуги.Количество = Выборка.КоличествоЧасовПриход;
						Если НЕ Выборка.КоличествоЧасовПриход = 0 Тогда
							СтрокаУслуги.Цена = Выборка.СуммаКОплатеПриход / Выборка.КоличествоЧасовПриход;
						КонецЕсли;
						СтрокаУслуги.Сумма = Выборка.СуммаКОплатеПриход;
						
					КонецЕсли; 
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Дата = КонецМесяца(Дата)-59; //23:59:00
		ДокОбъект.Дата = Дата;
		СуммаДокумента = Товары.Итог("Сумма") + Услуги.Итог("Сумма");
		
	КонецПроцедуры
	
	Функция ВКМ_ПолучитьДанныеПоДоговору()
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ДоговорыКонтрагентов.ВКМ_СуммаАбонентскойПлаты, 0) КАК ВКМ_СуммаАбонентскойПлаты,
		|	ДоговорыКонтрагентов.Владелец КАК Владелец,
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ДанныеДоговора
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ЕСТЬNULL(ВКМ_ВыполненныеКлиентуРаботыОбороты.КоличествоЧасовПриход, 0)) КАК КоличествоЧасовПриход,
		|	СУММА(ЕСТЬNULL(ВКМ_ВыполненныеКлиентуРаботыОбороты.СуммаКОплатеПриход, 0)) КАК СуммаКОплатеПриход,
		|	ВКМ_ВыполненныеКлиентуРаботыОбороты.Договор КАК Договор,
		|	ВКМ_ВыполненныеКлиентуРаботыОбороты.Клиент КАК Клиент
		|ПОМЕСТИТЬ ВТ_Работы
		|ИЗ
		|	РегистрНакопления.ВКМ_ВыполненныеКлиентуРаботы.Обороты(
		|			&ПериодНачало,
		|			&ПериодКонец,
		|			,
		|			(Клиент, Договор) В
		|				(ВЫБРАТЬ
		|					ВТ_ДанныеДоговора.Владелец КАК Клиент,
		|					ВТ_ДанныеДоговора.Ссылка КАК Договор
		|				ИЗ
		|					ВТ_ДанныеДоговора КАК ВТ_ДанныеДоговора)) КАК ВКМ_ВыполненныеКлиентуРаботыОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ВКМ_ВыполненныеКлиентуРаботыОбороты.Договор,
		|	ВКМ_ВыполненныеКлиентуРаботыОбороты.Клиент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_ДанныеДоговора.ВКМ_СуммаАбонентскойПлаты, 0) КАК ВКМ_СуммаАбонентскойПлаты,
		|	ЕСТЬNULL(ВТ_Работы.КоличествоЧасовПриход, 0) КАК КоличествоЧасовПриход,
		|	ЕСТЬNULL(ВТ_Работы.СуммаКОплатеПриход, 0) КАК СуммаКОплатеПриход
		|ИЗ
		|	ВТ_Работы КАК ВТ_Работы
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ДанныеДоговора КАК ВТ_ДанныеДоговора
		|		ПО (ВТ_ДанныеДоговора.Ссылка = ВТ_Работы.Договор)
		|			И (ВТ_ДанныеДоговора.Владелец = ВТ_Работы.Клиент)";
		
		Запрос.УстановитьПараметр("Ссылка", Договор);                
		Запрос.УстановитьПараметр("ПериодНачало", НачалоМесяца(Дата));
		Запрос.УстановитьПараметр("ПериодКонец", КонецМесяца(Дата));
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Возврат Выборка;	
		
	КонецФункции
	
	#КонецОбласти
	
#КонецЕсли  


